# -*- coding: utf-8 -*-
# <nbformat>3.0</nbformat>

# <markdowncell>

# # Subset higher order stats by our bounding boxes

# <codecell>

#A list of imports we need for code later in the notebook.
#The css_styles() function must go last.
%matplotlib inline
from owslib.wfs import WebFeatureService
import json
from utilities import find_dict_keys
from shapely.geometry import shape, MultiPolygon
from shapely.geometry import box

import folium
from utilities import get_coords
from IPython.core.display import HTML

import time
import numpy as np
from numpy import ma
import netCDF4
import pandas as pd
from pandas import Series

import matplotlib as mpl
from matplotlib import cm
import matplotlib.pyplot as plt
from matplotlib import ticker

from utilities import css_styles
css_styles()

# <codecell>

#Load our important bird areas again.
known_wfs = "http://solo.axiomalaska.com/geoserver/audubon/ows"
wfs = WebFeatureService(known_wfs, version='1.0.0')
geojson_response = wfs.getfeature(typename=['audubon:audubon_ibas'], outputFormat="application/json", srsname="urn:x-ogc:def:crs:EPSG:4326").read()
geojson = json.loads(geojson_response)

geometries = find_dict_keys('geometry', geojson)
shapes = [shape(g) for g in geometries]

sitenums = find_dict_keys('sitenum', geojson)
sitenums = [str(s) for s in sitenums]

objectids = find_dict_keys('objectid', geojson)
objectids = [str(s) for s in objectids]

#This generates bounding boxes from the complex geometries in shapes.
minlat = list()
minlon = list()
maxlat = list()
maxlon = list()
for s in shapes:
    minlat.append(s.bounds[0])
    minlon.append(s.bounds[1])
    maxlat.append(s.bounds[2])
    maxlon.append(s.bounds[3])
# miny, minx, maxy, maxx

# <codecell>

#Bring in netCDF datasets
#Set datasets
avg = netCDF4.Dataset('/augie/gluster/data/netCDF/pmel/core/Outputs/core_average.nc')
stddev = netCDF4.Dataset('/augie/gluster/data/netCDF/pmel/core/Outputs/core_rmssdn.nc')
pavg = netCDF4.Dataset('/augie/gluster/data/netCDF/pmel/cccma/Outputs/cccma_average.nc')
pstddev = netCDF4.Dataset('/augie/gluster/data/netCDF/pmel/cccma/Outputs/cccma_rmssdn.nc')

# <codecell>

# Load latitude and longitude arrays
latitude = np.array(avg.variables['LATITUDE'])
longitude = np.array(avg.variables['LONGITUDE'])

# <markdowncell>

# Some shapes will be empty (i.e., there's a polygon, but no model data), others will have very few values. We should keep track of how many model pixels are going into each resulting mean. For the combined IBAs, there are 210 polygons, identified by sitenums, objectids, and their geometries.

# <markdowncell>

# ##Store the results by keeping track of the data in a Pandas Dataframe
# We will append columns to these and fill in the data as we get it.

# <codecell>

outputs = pd.DataFrame({'sitenum': sitenums,
                        'objectid': objectids,
                        'minlat': minlat,
                        'minlon': minlon,
                        'maxlat': maxlat,
                        'maxlon': maxlon
                        },
                       columns = ['sitenum', 'objectid', 'minlat', 'maxlat', 'minlon', 'maxlon'])
print outputs.head()

# <codecell>

print longitude

# <markdowncell>

# Now convert the latlons to pixel indices for the model.

# <codecell>

n=len(outputs.sitenum)
latindices = list()
lonindices = list()

for n in range(0, n-1):
    #first do latitude
    indicesy = np.where(np.logical_and(latitude <= maxlat[n],
                                       latitude >= minlat[n]))
    latindices.append(indicesy[0])
    #then longitude
    #PMEL models are in positive east, so we have to convert our bounding box.
    indicesx = np.where(np.logical_and(longitude[:] <= maxlon[n]+360,
                                       longitude[:] >= minlon[n]+360))
    lonindices.append(indicesx[0])

# <codecell>

#Initialize empty arrays, filled with NaNs.
miny = (np.empty(n))
miny.fill(np.nan)

maxy = miny
minx = miny
maxx = miny

for n in range(0, n-1):
    if len(latindices[n]) > 0:
        miny[n] = min(latindices[n])

##        maxy[n] = min(latindices[n])
        

# <codecell>

miny

# <codecell>

#Each indexed shape has a bounds, with miny, minx, maxy, maxx in lat/lon
#we're going to convert these to pixel values.




lat_data = latitude[lat_indices]



lon_indices = np.where(lon_indices)
lon_data = longitude[lon_indices]

# <codecell>

print lon_indices

# <codecell>

import pandas as pd
data = pd.Panel(subset_variable, items=time_data, major_axis=lat_data, minor_axis=lon_data)

